name: "[DEPLOY] Manual Deploy To Test"

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version (format: x.xxx.x, ie: 1.221.1)'
        required: true

jobs:
  show-releases:
    name: Show Available Releases
    runs-on: ubuntu-latest
    steps:
      - name: List recent releases
        run: |
          echo "## Available Releases" >> $GITHUB_STEP_SUMMARY
          echo "Recent releases you can deploy:" >> $GITHUB_STEP_SUMMARY
          gh release list --limit 10 --json tagName,createdAt,name | jq -r '.[] | "- **\(.tagName)** (\(.name)) - \(.createdAt[:10])"' >> $GITHUB_STEP_SUMMARY
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  validate-version:
    name: Validate Version Exists
    runs-on: ubuntu-latest
    steps:
      - name: Validate version exists
        run: |
          if ! gh release view "v${{ github.event.inputs.version }}" > /dev/null 2>&1; then
            echo "::error::Release v${{ github.event.inputs.version }} not found"
            echo "Available releases:"
            gh release list --limit 5 --json tagName --jq '.[].tagName'
            exit 1
          fi
          echo "âœ… Version v${{ github.event.inputs.version }} found"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  deployment:
    name: Deploy services (Test IK4)
    environment: test_ik4
    runs-on: ubuntu-latest
    strategy:
      matrix:
        services:
          [
            'acmapi',
            'publicapi',
            'publicprojections',
            'adminapi',
            'adminprojections',
          ]
    steps:
      - name: CD
        id: awscurl-polling-action
        env:
          BUILD_URL: ${{ secrets.VBR_AWS_BUILD_API }}/${{matrix.services}}/test/deploy/v4
          STATUS_URL: ${{ secrets.VBR_AWS_BUILD_STATUS_API }}/${{matrix.services}}/test/deploy/v4/status
        uses: informatievlaanderen/awscurl-polling-action/polling-action@deploy-v4
        with:
          environment: test
          version: ${{ github.event.inputs.version }}
          status-url: $STATUS_URL
          deploy-url: $BUILD_URL
          access-key: ${{ secrets.VBR_AWS_BUILD_USER_ACCESS_KEY_ID_IK4 }}
          secret-key: ${{ secrets.VBR_AWS_BUILD_USER_SECRET_ACCESS_KEY_IK4 }}
          deploy-target: 'ecs'
          domain: 'verenigingsregister'
          project: 'verenigingsregister'
          application: ${{matrix.services}}
          interval: 2
      - name: output
        shell: bash
        if: always()
        run: |
          echo build-uuid: ${{ steps.awscurl-polling-action.outputs.build-uuid }}
          echo Status: ${{ steps.awscurl-polling-action.outputs.status }}
          echo ${{ steps.awscurl-polling-action.outputs.final-message }}

  deployment_scheduledtasks:
    name: Deploy scheduled tasks (Test IK4)
    environment: test_ik4
    runs-on: ubuntu-latest
    strategy:
      matrix:
        services:
          [
            'adressensync',
            'powerbiexport'
          ]
    steps:
      - name: CD
        id: awscurl-polling-action
        env:
          BUILD_URL: ${{ secrets.VBR_AWS_BUILD_API }}/${{matrix.services}}/test/deploy/v4
          STATUS_URL: ${{ secrets.VBR_AWS_BUILD_STATUS_API }}/${{matrix.services}}/test/deploy/v4/status
        uses: informatievlaanderen/awscurl-polling-action/polling-action@deploy-v4
        with:
          environment: test
          version: ${{ github.event.inputs.version }}
          status-url: $STATUS_URL
          deploy-url: $BUILD_URL
          access-key: ${{ secrets.VBR_AWS_BUILD_USER_ACCESS_KEY_ID_IK4 }}
          secret-key: ${{ secrets.VBR_AWS_BUILD_USER_SECRET_ACCESS_KEY_IK4 }}
          domain: 'verenigingsregister'
          project: 'verenigingsregister'
          deploy-target: 'ecs'
          application: ${{matrix.services}}
          interval: 2
      - name: output
        shell: bash
        if: always()
        run: |
          echo build-uuid: ${{ steps.awscurl-polling-action.outputs.build-uuid }}
          echo Status: ${{ steps.awscurl-polling-action.outputs.status }}
          echo ${{ steps.awscurl-polling-action.outputs.final-message }}

  deployment_lambdas:
    name: Deploy lambdas
    environment: test_ik4
    runs-on: ubuntu-latest
    strategy:
      matrix:
        services:
          [
            'kbosync',
          ]
    steps:
      - name: CD
        id: awscurl-polling-action
        env:
          BUILD_URL: ${{ secrets.VBR_AWS_BUILD_API }}/kbosync/test/deploy/v4
          STATUS_URL: ${{ secrets.VBR_AWS_BUILD_STATUS_API }}/kbosync/test/deploy/v4/status
        uses: informatievlaanderen/awscurl-polling-action/polling-action@deploy-v4
        with:
          environment: test
          version: ${{ github.event.inputs.version }}
          status-url: $STATUS_URL
          deploy-url: $BUILD_URL
          access-key: ${{ secrets.VBR_AWS_BUILD_USER_ACCESS_KEY_ID_IK4 }}
          secret-key: ${{ secrets.VBR_AWS_BUILD_USER_SECRET_ACCESS_KEY_IK4 }}
          deploy-target: 'lambda'
          domain: 'verenigingsregister'
          project: 'verenigingsregister'
          application: 'lambda'
          interval: 2
      - name: output
        shell: bash
        if: always()
        run: |
          echo build-uuid: ${{ steps.awscurl-polling-action.outputs.build-uuid }}
          echo Status: ${{ steps.awscurl-polling-action.outputs.status }}
          echo ${{ steps.awscurl-polling-action.outputs.final-message }}

  call-postman-tests:
    needs:
      - deployment
      - deployment_scheduledtasks
      - deployment_lambdas
    uses: ./.github/workflows/postman.minimal.yml
    secrets:
      POSTMAN_API_KEY: ${{ secrets.POSTMAN_API_KEY }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
