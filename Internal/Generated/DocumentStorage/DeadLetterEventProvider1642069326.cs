// <auto-generated/>
#pragma warning disable
using JasperFx.Events.Daemon;
using Marten.Internal;
using Marten.Internal.Storage;
using Marten.Schema;
using Marten.Schema.Arguments;
using Npgsql;
using System;
using System.Collections.Generic;
using Weasel.Core;
using Weasel.Postgresql;

namespace Marten.Generated.DocumentStorage
{
    // START: UpsertDeadLetterEventOperation1642069326
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class UpsertDeadLetterEventOperation1642069326 : Marten.Internal.Operations.StorageOperation<JasperFx.Events.Daemon.DeadLetterEvent, System.Guid>
    {
        private readonly JasperFx.Events.Daemon.DeadLetterEvent _document;
        private readonly System.Guid _id;
        private readonly System.Collections.Generic.Dictionary<System.Guid, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public UpsertDeadLetterEventOperation1642069326(JasperFx.Events.Daemon.DeadLetterEvent document, System.Guid id, System.Collections.Generic.Dictionary<System.Guid, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }



        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            storeVersion();
        }


        public override System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            storeVersion();
            // Nothing
            return System.Threading.Tasks.Task.CompletedTask;
        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Upsert;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Uuid;
        }


        public override void ConfigureParameters(Weasel.Postgresql.IGroupedParameterBuilder parameterBuilder, Weasel.Postgresql.ICommandBuilder builder, JasperFx.Events.Daemon.DeadLetterEvent document, Marten.Internal.IMartenSession session)
        {
            builder.Append("select public.mt_upsert_deadletterevent(");
            var parameter0 = parameterBuilder.AppendParameter(session.Serializer.ToJson(_document));
            parameter0.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            // .Net Class Type
            var parameter1 = parameterBuilder.AppendParameter(_document.GetType().FullName);
            parameter1.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            var parameter2 = parameterBuilder.AppendParameter<System.Guid>((document is JasperFx.Events.Daemon.DeadLetterEvent ? ((JasperFx.Events.Daemon.DeadLetterEvent)document).Id : default(System.Guid)));
            setVersionParameter(parameterBuilder);
            builder.Append(')');
        }

    }

    // END: UpsertDeadLetterEventOperation1642069326
    
    
    // START: InsertDeadLetterEventOperation1642069326
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class InsertDeadLetterEventOperation1642069326 : Marten.Internal.Operations.StorageOperation<JasperFx.Events.Daemon.DeadLetterEvent, System.Guid>
    {
        private readonly JasperFx.Events.Daemon.DeadLetterEvent _document;
        private readonly System.Guid _id;
        private readonly System.Collections.Generic.Dictionary<System.Guid, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public InsertDeadLetterEventOperation1642069326(JasperFx.Events.Daemon.DeadLetterEvent document, System.Guid id, System.Collections.Generic.Dictionary<System.Guid, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }



        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            storeVersion();
        }


        public override System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            storeVersion();
            // Nothing
            return System.Threading.Tasks.Task.CompletedTask;
        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Insert;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Uuid;
        }


        public override void ConfigureParameters(Weasel.Postgresql.IGroupedParameterBuilder parameterBuilder, Weasel.Postgresql.ICommandBuilder builder, JasperFx.Events.Daemon.DeadLetterEvent document, Marten.Internal.IMartenSession session)
        {
            builder.Append("select public.mt_insert_deadletterevent(");
            var parameter0 = parameterBuilder.AppendParameter(session.Serializer.ToJson(_document));
            parameter0.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            // .Net Class Type
            var parameter1 = parameterBuilder.AppendParameter(_document.GetType().FullName);
            parameter1.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            var parameter2 = parameterBuilder.AppendParameter<System.Guid>((document is JasperFx.Events.Daemon.DeadLetterEvent ? ((JasperFx.Events.Daemon.DeadLetterEvent)document).Id : default(System.Guid)));
            setVersionParameter(parameterBuilder);
            builder.Append(')');
        }

    }

    // END: InsertDeadLetterEventOperation1642069326
    
    
    // START: UpdateDeadLetterEventOperation1642069326
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class UpdateDeadLetterEventOperation1642069326 : Marten.Internal.Operations.StorageOperation<JasperFx.Events.Daemon.DeadLetterEvent, System.Guid>
    {
        private readonly JasperFx.Events.Daemon.DeadLetterEvent _document;
        private readonly System.Guid _id;
        private readonly System.Collections.Generic.Dictionary<System.Guid, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public UpdateDeadLetterEventOperation1642069326(JasperFx.Events.Daemon.DeadLetterEvent document, System.Guid id, System.Collections.Generic.Dictionary<System.Guid, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }



        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            storeVersion();
            postprocessUpdate(reader, exceptions);
        }


        public override async System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            storeVersion();
            await postprocessUpdateAsync(reader, exceptions, token);
        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Update;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Uuid;
        }


        public override void ConfigureParameters(Weasel.Postgresql.IGroupedParameterBuilder parameterBuilder, Weasel.Postgresql.ICommandBuilder builder, JasperFx.Events.Daemon.DeadLetterEvent document, Marten.Internal.IMartenSession session)
        {
            builder.Append("select public.mt_update_deadletterevent(");
            var parameter0 = parameterBuilder.AppendParameter(session.Serializer.ToJson(_document));
            parameter0.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            // .Net Class Type
            var parameter1 = parameterBuilder.AppendParameter(_document.GetType().FullName);
            parameter1.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            var parameter2 = parameterBuilder.AppendParameter<System.Guid>((document is JasperFx.Events.Daemon.DeadLetterEvent ? ((JasperFx.Events.Daemon.DeadLetterEvent)document).Id : default(System.Guid)));
            setVersionParameter(parameterBuilder);
            builder.Append(')');
        }

    }

    // END: UpdateDeadLetterEventOperation1642069326
    
    
    // START: QueryOnlyDeadLetterEventSelector1642069326
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class QueryOnlyDeadLetterEventSelector1642069326 : Marten.Internal.CodeGeneration.DocumentSelectorWithOnlySerializer, Marten.Linq.Selectors.ISelector<JasperFx.Events.Daemon.DeadLetterEvent>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public QueryOnlyDeadLetterEventSelector1642069326(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public JasperFx.Events.Daemon.DeadLetterEvent Resolve(System.Data.Common.DbDataReader reader)
        {

            JasperFx.Events.Daemon.DeadLetterEvent document;
            document = _serializer.FromJson<JasperFx.Events.Daemon.DeadLetterEvent>(reader, 0);
            return document;
        }


        public async System.Threading.Tasks.Task<JasperFx.Events.Daemon.DeadLetterEvent> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {

            JasperFx.Events.Daemon.DeadLetterEvent document;
            document = await _serializer.FromJsonAsync<JasperFx.Events.Daemon.DeadLetterEvent>(reader, 0, token).ConfigureAwait(false);
            return document;
        }

    }

    // END: QueryOnlyDeadLetterEventSelector1642069326
    
    
    // START: LightweightDeadLetterEventSelector1642069326
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class LightweightDeadLetterEventSelector1642069326 : Marten.Internal.CodeGeneration.DocumentSelectorWithVersions<JasperFx.Events.Daemon.DeadLetterEvent, System.Guid>, Marten.Linq.Selectors.ISelector<JasperFx.Events.Daemon.DeadLetterEvent>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public LightweightDeadLetterEventSelector1642069326(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public JasperFx.Events.Daemon.DeadLetterEvent Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = reader.GetFieldValue<System.Guid>(0);

            JasperFx.Events.Daemon.DeadLetterEvent document;
            document = _serializer.FromJson<JasperFx.Events.Daemon.DeadLetterEvent>(reader, 1);
            _session.MarkAsDocumentLoaded(id, document);
            return document;
        }


        public async System.Threading.Tasks.Task<JasperFx.Events.Daemon.DeadLetterEvent> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = await reader.GetFieldValueAsync<System.Guid>(0, token);

            JasperFx.Events.Daemon.DeadLetterEvent document;
            document = await _serializer.FromJsonAsync<JasperFx.Events.Daemon.DeadLetterEvent>(reader, 1, token).ConfigureAwait(false);
            _session.MarkAsDocumentLoaded(id, document);
            return document;
        }

    }

    // END: LightweightDeadLetterEventSelector1642069326
    
    
    // START: IdentityMapDeadLetterEventSelector1642069326
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class IdentityMapDeadLetterEventSelector1642069326 : Marten.Internal.CodeGeneration.DocumentSelectorWithIdentityMap<JasperFx.Events.Daemon.DeadLetterEvent, System.Guid>, Marten.Linq.Selectors.ISelector<JasperFx.Events.Daemon.DeadLetterEvent>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public IdentityMapDeadLetterEventSelector1642069326(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public JasperFx.Events.Daemon.DeadLetterEvent Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = reader.GetFieldValue<System.Guid>(0);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            JasperFx.Events.Daemon.DeadLetterEvent document;
            document = _serializer.FromJson<JasperFx.Events.Daemon.DeadLetterEvent>(reader, 1);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            return document;
        }


        public async System.Threading.Tasks.Task<JasperFx.Events.Daemon.DeadLetterEvent> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = await reader.GetFieldValueAsync<System.Guid>(0, token);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            JasperFx.Events.Daemon.DeadLetterEvent document;
            document = await _serializer.FromJsonAsync<JasperFx.Events.Daemon.DeadLetterEvent>(reader, 1, token).ConfigureAwait(false);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            return document;
        }

    }

    // END: IdentityMapDeadLetterEventSelector1642069326
    
    
    // START: DirtyTrackingDeadLetterEventSelector1642069326
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class DirtyTrackingDeadLetterEventSelector1642069326 : Marten.Internal.CodeGeneration.DocumentSelectorWithDirtyChecking<JasperFx.Events.Daemon.DeadLetterEvent, System.Guid>, Marten.Linq.Selectors.ISelector<JasperFx.Events.Daemon.DeadLetterEvent>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public DirtyTrackingDeadLetterEventSelector1642069326(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public JasperFx.Events.Daemon.DeadLetterEvent Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = reader.GetFieldValue<System.Guid>(0);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            JasperFx.Events.Daemon.DeadLetterEvent document;
            document = _serializer.FromJson<JasperFx.Events.Daemon.DeadLetterEvent>(reader, 1);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            StoreTracker(_session, document);
            return document;
        }


        public async System.Threading.Tasks.Task<JasperFx.Events.Daemon.DeadLetterEvent> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = await reader.GetFieldValueAsync<System.Guid>(0, token);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            JasperFx.Events.Daemon.DeadLetterEvent document;
            document = await _serializer.FromJsonAsync<JasperFx.Events.Daemon.DeadLetterEvent>(reader, 1, token).ConfigureAwait(false);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            StoreTracker(_session, document);
            return document;
        }

    }

    // END: DirtyTrackingDeadLetterEventSelector1642069326
    
    
    // START: QueryOnlyDeadLetterEventDocumentStorage1642069326
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class QueryOnlyDeadLetterEventDocumentStorage1642069326 : Marten.Internal.Storage.QueryOnlyDocumentStorage<JasperFx.Events.Daemon.DeadLetterEvent, System.Guid>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public QueryOnlyDeadLetterEventDocumentStorage1642069326(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override System.Guid AssignIdentity(JasperFx.Events.Daemon.DeadLetterEvent document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.Id == Guid.Empty) _setter(document, JasperFx.Core.CombGuidIdGeneration.NewGuid());
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(JasperFx.Events.Daemon.DeadLetterEvent document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpdateDeadLetterEventOperation1642069326
            (
                document, Identity(document),
                session.Versions.ForType<JasperFx.Events.Daemon.DeadLetterEvent, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Insert(JasperFx.Events.Daemon.DeadLetterEvent document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertDeadLetterEventOperation1642069326
            (
                document, Identity(document),
                session.Versions.ForType<JasperFx.Events.Daemon.DeadLetterEvent, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(JasperFx.Events.Daemon.DeadLetterEvent document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpsertDeadLetterEventOperation1642069326
            (
                document, Identity(document),
                session.Versions.ForType<JasperFx.Events.Daemon.DeadLetterEvent, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(JasperFx.Events.Daemon.DeadLetterEvent document, Marten.Internal.IMartenSession session, string tenant)
        {
            throw new System.NotSupportedException();
        }


        public override System.Guid Identity(JasperFx.Events.Daemon.DeadLetterEvent document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.QueryOnlyDeadLetterEventSelector1642069326(session, _document);
        }


        public override object RawIdentityValue(System.Guid id)
        {
            return id;
        }


        public override Npgsql.NpgsqlParameter BuildManyIdParameter(System.Guid[] ids)
        {
            return base.BuildManyIdParameter(ids);
        }

    }

    // END: QueryOnlyDeadLetterEventDocumentStorage1642069326
    
    
    // START: LightweightDeadLetterEventDocumentStorage1642069326
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class LightweightDeadLetterEventDocumentStorage1642069326 : Marten.Internal.Storage.LightweightDocumentStorage<JasperFx.Events.Daemon.DeadLetterEvent, System.Guid>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public LightweightDeadLetterEventDocumentStorage1642069326(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override System.Guid AssignIdentity(JasperFx.Events.Daemon.DeadLetterEvent document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.Id == Guid.Empty) _setter(document, JasperFx.Core.CombGuidIdGeneration.NewGuid());
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(JasperFx.Events.Daemon.DeadLetterEvent document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpdateDeadLetterEventOperation1642069326
            (
                document, Identity(document),
                session.Versions.ForType<JasperFx.Events.Daemon.DeadLetterEvent, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Insert(JasperFx.Events.Daemon.DeadLetterEvent document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertDeadLetterEventOperation1642069326
            (
                document, Identity(document),
                session.Versions.ForType<JasperFx.Events.Daemon.DeadLetterEvent, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(JasperFx.Events.Daemon.DeadLetterEvent document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpsertDeadLetterEventOperation1642069326
            (
                document, Identity(document),
                session.Versions.ForType<JasperFx.Events.Daemon.DeadLetterEvent, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(JasperFx.Events.Daemon.DeadLetterEvent document, Marten.Internal.IMartenSession session, string tenant)
        {
            throw new System.NotSupportedException();
        }


        public override System.Guid Identity(JasperFx.Events.Daemon.DeadLetterEvent document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.LightweightDeadLetterEventSelector1642069326(session, _document);
        }


        public override object RawIdentityValue(System.Guid id)
        {
            return id;
        }


        public override Npgsql.NpgsqlParameter BuildManyIdParameter(System.Guid[] ids)
        {
            return base.BuildManyIdParameter(ids);
        }

    }

    // END: LightweightDeadLetterEventDocumentStorage1642069326
    
    
    // START: IdentityMapDeadLetterEventDocumentStorage1642069326
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class IdentityMapDeadLetterEventDocumentStorage1642069326 : Marten.Internal.Storage.IdentityMapDocumentStorage<JasperFx.Events.Daemon.DeadLetterEvent, System.Guid>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public IdentityMapDeadLetterEventDocumentStorage1642069326(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override System.Guid AssignIdentity(JasperFx.Events.Daemon.DeadLetterEvent document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.Id == Guid.Empty) _setter(document, JasperFx.Core.CombGuidIdGeneration.NewGuid());
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(JasperFx.Events.Daemon.DeadLetterEvent document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpdateDeadLetterEventOperation1642069326
            (
                document, Identity(document),
                session.Versions.ForType<JasperFx.Events.Daemon.DeadLetterEvent, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Insert(JasperFx.Events.Daemon.DeadLetterEvent document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertDeadLetterEventOperation1642069326
            (
                document, Identity(document),
                session.Versions.ForType<JasperFx.Events.Daemon.DeadLetterEvent, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(JasperFx.Events.Daemon.DeadLetterEvent document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpsertDeadLetterEventOperation1642069326
            (
                document, Identity(document),
                session.Versions.ForType<JasperFx.Events.Daemon.DeadLetterEvent, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(JasperFx.Events.Daemon.DeadLetterEvent document, Marten.Internal.IMartenSession session, string tenant)
        {
            throw new System.NotSupportedException();
        }


        public override System.Guid Identity(JasperFx.Events.Daemon.DeadLetterEvent document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.IdentityMapDeadLetterEventSelector1642069326(session, _document);
        }


        public override object RawIdentityValue(System.Guid id)
        {
            return id;
        }


        public override Npgsql.NpgsqlParameter BuildManyIdParameter(System.Guid[] ids)
        {
            return base.BuildManyIdParameter(ids);
        }

    }

    // END: IdentityMapDeadLetterEventDocumentStorage1642069326
    
    
    // START: DirtyTrackingDeadLetterEventDocumentStorage1642069326
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class DirtyTrackingDeadLetterEventDocumentStorage1642069326 : Marten.Internal.Storage.DirtyCheckedDocumentStorage<JasperFx.Events.Daemon.DeadLetterEvent, System.Guid>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public DirtyTrackingDeadLetterEventDocumentStorage1642069326(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override System.Guid AssignIdentity(JasperFx.Events.Daemon.DeadLetterEvent document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.Id == Guid.Empty) _setter(document, JasperFx.Core.CombGuidIdGeneration.NewGuid());
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(JasperFx.Events.Daemon.DeadLetterEvent document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpdateDeadLetterEventOperation1642069326
            (
                document, Identity(document),
                session.Versions.ForType<JasperFx.Events.Daemon.DeadLetterEvent, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Insert(JasperFx.Events.Daemon.DeadLetterEvent document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertDeadLetterEventOperation1642069326
            (
                document, Identity(document),
                session.Versions.ForType<JasperFx.Events.Daemon.DeadLetterEvent, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(JasperFx.Events.Daemon.DeadLetterEvent document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpsertDeadLetterEventOperation1642069326
            (
                document, Identity(document),
                session.Versions.ForType<JasperFx.Events.Daemon.DeadLetterEvent, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(JasperFx.Events.Daemon.DeadLetterEvent document, Marten.Internal.IMartenSession session, string tenant)
        {
            throw new System.NotSupportedException();
        }


        public override System.Guid Identity(JasperFx.Events.Daemon.DeadLetterEvent document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.DirtyTrackingDeadLetterEventSelector1642069326(session, _document);
        }


        public override object RawIdentityValue(System.Guid id)
        {
            return id;
        }


        public override Npgsql.NpgsqlParameter BuildManyIdParameter(System.Guid[] ids)
        {
            return base.BuildManyIdParameter(ids);
        }

    }

    // END: DirtyTrackingDeadLetterEventDocumentStorage1642069326
    
    
    // START: DeadLetterEventBulkLoader1642069326
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class DeadLetterEventBulkLoader1642069326 : Marten.Internal.CodeGeneration.BulkLoader<JasperFx.Events.Daemon.DeadLetterEvent, System.Guid>
    {
        private readonly Marten.Internal.Storage.IDocumentStorage<JasperFx.Events.Daemon.DeadLetterEvent, System.Guid> _storage;

        public DeadLetterEventBulkLoader1642069326(Marten.Internal.Storage.IDocumentStorage<JasperFx.Events.Daemon.DeadLetterEvent, System.Guid> storage) : base(storage)
        {
            _storage = storage;
        }


        public const string MAIN_LOADER_SQL = "COPY public.mt_doc_deadletterevent(\"mt_dotnet_type\", \"id\", \"mt_version\", \"data\") FROM STDIN BINARY";

        public const string TEMP_LOADER_SQL = "COPY mt_doc_deadletterevent_temp(\"mt_dotnet_type\", \"id\", \"mt_version\", \"data\") FROM STDIN BINARY";

        public const string COPY_NEW_DOCUMENTS_SQL = "insert into public.mt_doc_deadletterevent (\"id\", \"data\", \"mt_version\", \"mt_dotnet_type\", mt_last_modified) (select mt_doc_deadletterevent_temp.\"id\", mt_doc_deadletterevent_temp.\"data\", mt_doc_deadletterevent_temp.\"mt_version\", mt_doc_deadletterevent_temp.\"mt_dotnet_type\", transaction_timestamp() from mt_doc_deadletterevent_temp left join public.mt_doc_deadletterevent on mt_doc_deadletterevent_temp.id = public.mt_doc_deadletterevent.id where public.mt_doc_deadletterevent.id is null)";

        public const string OVERWRITE_SQL = "update public.mt_doc_deadletterevent target SET data = source.data, mt_version = source.mt_version, mt_dotnet_type = source.mt_dotnet_type, mt_last_modified = transaction_timestamp() FROM mt_doc_deadletterevent_temp source WHERE source.id = target.id";

        public const string CREATE_TEMP_TABLE_FOR_COPYING_SQL = "create temporary table mt_doc_deadletterevent_temp (like public.mt_doc_deadletterevent including defaults)";


        public override string CreateTempTableForCopying()
        {
            return CREATE_TEMP_TABLE_FOR_COPYING_SQL;
        }


        public override string CopyNewDocumentsFromTempTable()
        {
            return COPY_NEW_DOCUMENTS_SQL;
        }


        public override string OverwriteDuplicatesFromTempTable()
        {
            return OVERWRITE_SQL;
        }


        public override async System.Threading.Tasks.Task LoadRowAsync(Npgsql.NpgsqlBinaryImporter writer, JasperFx.Events.Daemon.DeadLetterEvent document, Marten.Storage.Tenant tenant, Marten.ISerializer serializer, System.Threading.CancellationToken cancellation)
        {
            await writer.WriteAsync(document.GetType().FullName, NpgsqlTypes.NpgsqlDbType.Varchar, cancellation);
            await writer.WriteAsync(((JasperFx.Events.Daemon.DeadLetterEvent)document).Id, NpgsqlTypes.NpgsqlDbType.Uuid, cancellation);
            await writer.WriteAsync(JasperFx.Core.CombGuidIdGeneration.NewGuid(), NpgsqlTypes.NpgsqlDbType.Uuid, cancellation);
            await writer.WriteAsync(serializer.ToJson(document), NpgsqlTypes.NpgsqlDbType.Jsonb, cancellation);
        }


        public override string MainLoaderSql()
        {
            return MAIN_LOADER_SQL;
        }


        public override string TempLoaderSql()
        {
            return TEMP_LOADER_SQL;
        }

    }

    // END: DeadLetterEventBulkLoader1642069326
    
    
    // START: DeadLetterEventProvider1642069326
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class DeadLetterEventProvider1642069326 : Marten.Internal.Storage.DocumentProvider<JasperFx.Events.Daemon.DeadLetterEvent>
    {
        private readonly Marten.Schema.DocumentMapping _mapping;

        public DeadLetterEventProvider1642069326(Marten.Schema.DocumentMapping mapping) : base(new DeadLetterEventBulkLoader1642069326(new QueryOnlyDeadLetterEventDocumentStorage1642069326(mapping)), new QueryOnlyDeadLetterEventDocumentStorage1642069326(mapping), new LightweightDeadLetterEventDocumentStorage1642069326(mapping), new IdentityMapDeadLetterEventDocumentStorage1642069326(mapping), new DirtyTrackingDeadLetterEventDocumentStorage1642069326(mapping))
        {
            _mapping = mapping;
        }


    }

    // END: DeadLetterEventProvider1642069326
    
    
}

