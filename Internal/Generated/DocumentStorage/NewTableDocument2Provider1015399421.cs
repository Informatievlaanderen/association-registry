// <auto-generated/>
#pragma warning disable
using AssociationRegistry.Migrations.Generator;
using Marten.Internal;
using Marten.Internal.Storage;
using Marten.Schema;
using Marten.Schema.Arguments;
using Npgsql;
using System;
using System.Collections.Generic;
using Weasel.Core;
using Weasel.Postgresql;

namespace Marten.Generated.DocumentStorage
{
    // START: UpsertNewTableDocument2Operation1015399421
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class UpsertNewTableDocument2Operation1015399421 : Marten.Internal.Operations.StorageOperation<AssociationRegistry.Migrations.Generator.NewTableDocument2, string>
    {
        private readonly AssociationRegistry.Migrations.Generator.NewTableDocument2 _document;
        private readonly string _id;
        private readonly System.Collections.Generic.Dictionary<string, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public UpsertNewTableDocument2Operation1015399421(AssociationRegistry.Migrations.Generator.NewTableDocument2 document, string id, System.Collections.Generic.Dictionary<string, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }



        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            storeVersion();
        }


        public override System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            storeVersion();
            // Nothing
            return System.Threading.Tasks.Task.CompletedTask;
        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Upsert;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Text;
        }


        public override void ConfigureParameters(Weasel.Postgresql.IGroupedParameterBuilder parameterBuilder, Weasel.Postgresql.ICommandBuilder builder, AssociationRegistry.Migrations.Generator.NewTableDocument2 document, Marten.Internal.IMartenSession session)
        {
            builder.Append("select public.mt_upsert_newtabledocument2(");
            var parameter0 = parameterBuilder.AppendParameter(session.Serializer.ToJson(_document));
            parameter0.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            // .Net Class Type
            var parameter1 = parameterBuilder.AppendParameter(_document.GetType().FullName);
            parameter1.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;

            if ((document is AssociationRegistry.Migrations.Generator.NewTableDocument2 && ((AssociationRegistry.Migrations.Generator.NewTableDocument2)document).Id != null))
            {
                var parameter2 = parameterBuilder.AppendParameter(((AssociationRegistry.Migrations.Generator.NewTableDocument2)document).Id);
                parameter2.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Text;
            }

            else
            {
                var parameter2 = parameterBuilder.AppendParameter<object>(System.DBNull.Value);
            }

            setVersionParameter(parameterBuilder);
            builder.Append(')');
        }

    }

    // END: UpsertNewTableDocument2Operation1015399421
    
    
    // START: InsertNewTableDocument2Operation1015399421
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class InsertNewTableDocument2Operation1015399421 : Marten.Internal.Operations.StorageOperation<AssociationRegistry.Migrations.Generator.NewTableDocument2, string>
    {
        private readonly AssociationRegistry.Migrations.Generator.NewTableDocument2 _document;
        private readonly string _id;
        private readonly System.Collections.Generic.Dictionary<string, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public InsertNewTableDocument2Operation1015399421(AssociationRegistry.Migrations.Generator.NewTableDocument2 document, string id, System.Collections.Generic.Dictionary<string, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }



        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            storeVersion();
        }


        public override System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            storeVersion();
            // Nothing
            return System.Threading.Tasks.Task.CompletedTask;
        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Insert;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Text;
        }


        public override void ConfigureParameters(Weasel.Postgresql.IGroupedParameterBuilder parameterBuilder, Weasel.Postgresql.ICommandBuilder builder, AssociationRegistry.Migrations.Generator.NewTableDocument2 document, Marten.Internal.IMartenSession session)
        {
            builder.Append("select public.mt_insert_newtabledocument2(");
            var parameter0 = parameterBuilder.AppendParameter(session.Serializer.ToJson(_document));
            parameter0.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            // .Net Class Type
            var parameter1 = parameterBuilder.AppendParameter(_document.GetType().FullName);
            parameter1.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;

            if ((document is AssociationRegistry.Migrations.Generator.NewTableDocument2 && ((AssociationRegistry.Migrations.Generator.NewTableDocument2)document).Id != null))
            {
                var parameter2 = parameterBuilder.AppendParameter(((AssociationRegistry.Migrations.Generator.NewTableDocument2)document).Id);
                parameter2.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Text;
            }

            else
            {
                var parameter2 = parameterBuilder.AppendParameter<object>(System.DBNull.Value);
            }

            setVersionParameter(parameterBuilder);
            builder.Append(')');
        }

    }

    // END: InsertNewTableDocument2Operation1015399421
    
    
    // START: UpdateNewTableDocument2Operation1015399421
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class UpdateNewTableDocument2Operation1015399421 : Marten.Internal.Operations.StorageOperation<AssociationRegistry.Migrations.Generator.NewTableDocument2, string>
    {
        private readonly AssociationRegistry.Migrations.Generator.NewTableDocument2 _document;
        private readonly string _id;
        private readonly System.Collections.Generic.Dictionary<string, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public UpdateNewTableDocument2Operation1015399421(AssociationRegistry.Migrations.Generator.NewTableDocument2 document, string id, System.Collections.Generic.Dictionary<string, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }



        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            storeVersion();
            postprocessUpdate(reader, exceptions);
        }


        public override async System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            storeVersion();
            await postprocessUpdateAsync(reader, exceptions, token);
        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Update;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Text;
        }


        public override void ConfigureParameters(Weasel.Postgresql.IGroupedParameterBuilder parameterBuilder, Weasel.Postgresql.ICommandBuilder builder, AssociationRegistry.Migrations.Generator.NewTableDocument2 document, Marten.Internal.IMartenSession session)
        {
            builder.Append("select public.mt_update_newtabledocument2(");
            var parameter0 = parameterBuilder.AppendParameter(session.Serializer.ToJson(_document));
            parameter0.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            // .Net Class Type
            var parameter1 = parameterBuilder.AppendParameter(_document.GetType().FullName);
            parameter1.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;

            if ((document is AssociationRegistry.Migrations.Generator.NewTableDocument2 && ((AssociationRegistry.Migrations.Generator.NewTableDocument2)document).Id != null))
            {
                var parameter2 = parameterBuilder.AppendParameter(((AssociationRegistry.Migrations.Generator.NewTableDocument2)document).Id);
                parameter2.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Text;
            }

            else
            {
                var parameter2 = parameterBuilder.AppendParameter<object>(System.DBNull.Value);
            }

            setVersionParameter(parameterBuilder);
            builder.Append(')');
        }

    }

    // END: UpdateNewTableDocument2Operation1015399421
    
    
    // START: QueryOnlyNewTableDocument2Selector1015399421
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class QueryOnlyNewTableDocument2Selector1015399421 : Marten.Internal.CodeGeneration.DocumentSelectorWithOnlySerializer, Marten.Linq.Selectors.ISelector<AssociationRegistry.Migrations.Generator.NewTableDocument2>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public QueryOnlyNewTableDocument2Selector1015399421(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public AssociationRegistry.Migrations.Generator.NewTableDocument2 Resolve(System.Data.Common.DbDataReader reader)
        {

            AssociationRegistry.Migrations.Generator.NewTableDocument2 document;
            document = _serializer.FromJson<AssociationRegistry.Migrations.Generator.NewTableDocument2>(reader, 0);
            return document;
        }


        public async System.Threading.Tasks.Task<AssociationRegistry.Migrations.Generator.NewTableDocument2> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {

            AssociationRegistry.Migrations.Generator.NewTableDocument2 document;
            document = await _serializer.FromJsonAsync<AssociationRegistry.Migrations.Generator.NewTableDocument2>(reader, 0, token).ConfigureAwait(false);
            return document;
        }

    }

    // END: QueryOnlyNewTableDocument2Selector1015399421
    
    
    // START: LightweightNewTableDocument2Selector1015399421
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class LightweightNewTableDocument2Selector1015399421 : Marten.Internal.CodeGeneration.DocumentSelectorWithVersions<AssociationRegistry.Migrations.Generator.NewTableDocument2, string>, Marten.Linq.Selectors.ISelector<AssociationRegistry.Migrations.Generator.NewTableDocument2>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public LightweightNewTableDocument2Selector1015399421(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public AssociationRegistry.Migrations.Generator.NewTableDocument2 Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = reader.GetFieldValue<string>(0);

            AssociationRegistry.Migrations.Generator.NewTableDocument2 document;
            document = _serializer.FromJson<AssociationRegistry.Migrations.Generator.NewTableDocument2>(reader, 1);
            _session.MarkAsDocumentLoaded(id, document);
            return document;
        }


        public async System.Threading.Tasks.Task<AssociationRegistry.Migrations.Generator.NewTableDocument2> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = await reader.GetFieldValueAsync<string>(0, token);

            AssociationRegistry.Migrations.Generator.NewTableDocument2 document;
            document = await _serializer.FromJsonAsync<AssociationRegistry.Migrations.Generator.NewTableDocument2>(reader, 1, token).ConfigureAwait(false);
            _session.MarkAsDocumentLoaded(id, document);
            return document;
        }

    }

    // END: LightweightNewTableDocument2Selector1015399421
    
    
    // START: IdentityMapNewTableDocument2Selector1015399421
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class IdentityMapNewTableDocument2Selector1015399421 : Marten.Internal.CodeGeneration.DocumentSelectorWithIdentityMap<AssociationRegistry.Migrations.Generator.NewTableDocument2, string>, Marten.Linq.Selectors.ISelector<AssociationRegistry.Migrations.Generator.NewTableDocument2>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public IdentityMapNewTableDocument2Selector1015399421(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public AssociationRegistry.Migrations.Generator.NewTableDocument2 Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = reader.GetFieldValue<string>(0);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            AssociationRegistry.Migrations.Generator.NewTableDocument2 document;
            document = _serializer.FromJson<AssociationRegistry.Migrations.Generator.NewTableDocument2>(reader, 1);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            return document;
        }


        public async System.Threading.Tasks.Task<AssociationRegistry.Migrations.Generator.NewTableDocument2> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = await reader.GetFieldValueAsync<string>(0, token);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            AssociationRegistry.Migrations.Generator.NewTableDocument2 document;
            document = await _serializer.FromJsonAsync<AssociationRegistry.Migrations.Generator.NewTableDocument2>(reader, 1, token).ConfigureAwait(false);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            return document;
        }

    }

    // END: IdentityMapNewTableDocument2Selector1015399421
    
    
    // START: DirtyTrackingNewTableDocument2Selector1015399421
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class DirtyTrackingNewTableDocument2Selector1015399421 : Marten.Internal.CodeGeneration.DocumentSelectorWithDirtyChecking<AssociationRegistry.Migrations.Generator.NewTableDocument2, string>, Marten.Linq.Selectors.ISelector<AssociationRegistry.Migrations.Generator.NewTableDocument2>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public DirtyTrackingNewTableDocument2Selector1015399421(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public AssociationRegistry.Migrations.Generator.NewTableDocument2 Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = reader.GetFieldValue<string>(0);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            AssociationRegistry.Migrations.Generator.NewTableDocument2 document;
            document = _serializer.FromJson<AssociationRegistry.Migrations.Generator.NewTableDocument2>(reader, 1);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            StoreTracker(_session, document);
            return document;
        }


        public async System.Threading.Tasks.Task<AssociationRegistry.Migrations.Generator.NewTableDocument2> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = await reader.GetFieldValueAsync<string>(0, token);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            AssociationRegistry.Migrations.Generator.NewTableDocument2 document;
            document = await _serializer.FromJsonAsync<AssociationRegistry.Migrations.Generator.NewTableDocument2>(reader, 1, token).ConfigureAwait(false);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            StoreTracker(_session, document);
            return document;
        }

    }

    // END: DirtyTrackingNewTableDocument2Selector1015399421
    
    
    // START: QueryOnlyNewTableDocument2DocumentStorage1015399421
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class QueryOnlyNewTableDocument2DocumentStorage1015399421 : Marten.Internal.Storage.QueryOnlyDocumentStorage<AssociationRegistry.Migrations.Generator.NewTableDocument2, string>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public QueryOnlyNewTableDocument2DocumentStorage1015399421(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override string AssignIdentity(AssociationRegistry.Migrations.Generator.NewTableDocument2 document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (string.IsNullOrEmpty(document.Id)) throw new InvalidOperationException("Id/id values cannot be null or empty");
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(AssociationRegistry.Migrations.Generator.NewTableDocument2 document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpdateNewTableDocument2Operation1015399421
            (
                document, Identity(document),
                session.Versions.ForType<AssociationRegistry.Migrations.Generator.NewTableDocument2, string>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Insert(AssociationRegistry.Migrations.Generator.NewTableDocument2 document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertNewTableDocument2Operation1015399421
            (
                document, Identity(document),
                session.Versions.ForType<AssociationRegistry.Migrations.Generator.NewTableDocument2, string>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(AssociationRegistry.Migrations.Generator.NewTableDocument2 document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpsertNewTableDocument2Operation1015399421
            (
                document, Identity(document),
                session.Versions.ForType<AssociationRegistry.Migrations.Generator.NewTableDocument2, string>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(AssociationRegistry.Migrations.Generator.NewTableDocument2 document, Marten.Internal.IMartenSession session, string tenant)
        {
            throw new System.NotSupportedException();
        }


        public override string Identity(AssociationRegistry.Migrations.Generator.NewTableDocument2 document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.QueryOnlyNewTableDocument2Selector1015399421(session, _document);
        }


        public override object RawIdentityValue(string id)
        {
            return id;
        }


        public override Npgsql.NpgsqlParameter BuildManyIdParameter(System.String[] ids)
        {
            return base.BuildManyIdParameter(ids);
        }

    }

    // END: QueryOnlyNewTableDocument2DocumentStorage1015399421
    
    
    // START: LightweightNewTableDocument2DocumentStorage1015399421
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class LightweightNewTableDocument2DocumentStorage1015399421 : Marten.Internal.Storage.LightweightDocumentStorage<AssociationRegistry.Migrations.Generator.NewTableDocument2, string>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public LightweightNewTableDocument2DocumentStorage1015399421(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override string AssignIdentity(AssociationRegistry.Migrations.Generator.NewTableDocument2 document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (string.IsNullOrEmpty(document.Id)) throw new InvalidOperationException("Id/id values cannot be null or empty");
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(AssociationRegistry.Migrations.Generator.NewTableDocument2 document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpdateNewTableDocument2Operation1015399421
            (
                document, Identity(document),
                session.Versions.ForType<AssociationRegistry.Migrations.Generator.NewTableDocument2, string>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Insert(AssociationRegistry.Migrations.Generator.NewTableDocument2 document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertNewTableDocument2Operation1015399421
            (
                document, Identity(document),
                session.Versions.ForType<AssociationRegistry.Migrations.Generator.NewTableDocument2, string>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(AssociationRegistry.Migrations.Generator.NewTableDocument2 document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpsertNewTableDocument2Operation1015399421
            (
                document, Identity(document),
                session.Versions.ForType<AssociationRegistry.Migrations.Generator.NewTableDocument2, string>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(AssociationRegistry.Migrations.Generator.NewTableDocument2 document, Marten.Internal.IMartenSession session, string tenant)
        {
            throw new System.NotSupportedException();
        }


        public override string Identity(AssociationRegistry.Migrations.Generator.NewTableDocument2 document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.LightweightNewTableDocument2Selector1015399421(session, _document);
        }


        public override object RawIdentityValue(string id)
        {
            return id;
        }


        public override Npgsql.NpgsqlParameter BuildManyIdParameter(System.String[] ids)
        {
            return base.BuildManyIdParameter(ids);
        }

    }

    // END: LightweightNewTableDocument2DocumentStorage1015399421
    
    
    // START: IdentityMapNewTableDocument2DocumentStorage1015399421
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class IdentityMapNewTableDocument2DocumentStorage1015399421 : Marten.Internal.Storage.IdentityMapDocumentStorage<AssociationRegistry.Migrations.Generator.NewTableDocument2, string>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public IdentityMapNewTableDocument2DocumentStorage1015399421(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override string AssignIdentity(AssociationRegistry.Migrations.Generator.NewTableDocument2 document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (string.IsNullOrEmpty(document.Id)) throw new InvalidOperationException("Id/id values cannot be null or empty");
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(AssociationRegistry.Migrations.Generator.NewTableDocument2 document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpdateNewTableDocument2Operation1015399421
            (
                document, Identity(document),
                session.Versions.ForType<AssociationRegistry.Migrations.Generator.NewTableDocument2, string>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Insert(AssociationRegistry.Migrations.Generator.NewTableDocument2 document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertNewTableDocument2Operation1015399421
            (
                document, Identity(document),
                session.Versions.ForType<AssociationRegistry.Migrations.Generator.NewTableDocument2, string>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(AssociationRegistry.Migrations.Generator.NewTableDocument2 document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpsertNewTableDocument2Operation1015399421
            (
                document, Identity(document),
                session.Versions.ForType<AssociationRegistry.Migrations.Generator.NewTableDocument2, string>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(AssociationRegistry.Migrations.Generator.NewTableDocument2 document, Marten.Internal.IMartenSession session, string tenant)
        {
            throw new System.NotSupportedException();
        }


        public override string Identity(AssociationRegistry.Migrations.Generator.NewTableDocument2 document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.IdentityMapNewTableDocument2Selector1015399421(session, _document);
        }


        public override object RawIdentityValue(string id)
        {
            return id;
        }


        public override Npgsql.NpgsqlParameter BuildManyIdParameter(System.String[] ids)
        {
            return base.BuildManyIdParameter(ids);
        }

    }

    // END: IdentityMapNewTableDocument2DocumentStorage1015399421
    
    
    // START: DirtyTrackingNewTableDocument2DocumentStorage1015399421
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class DirtyTrackingNewTableDocument2DocumentStorage1015399421 : Marten.Internal.Storage.DirtyCheckedDocumentStorage<AssociationRegistry.Migrations.Generator.NewTableDocument2, string>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public DirtyTrackingNewTableDocument2DocumentStorage1015399421(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override string AssignIdentity(AssociationRegistry.Migrations.Generator.NewTableDocument2 document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (string.IsNullOrEmpty(document.Id)) throw new InvalidOperationException("Id/id values cannot be null or empty");
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(AssociationRegistry.Migrations.Generator.NewTableDocument2 document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpdateNewTableDocument2Operation1015399421
            (
                document, Identity(document),
                session.Versions.ForType<AssociationRegistry.Migrations.Generator.NewTableDocument2, string>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Insert(AssociationRegistry.Migrations.Generator.NewTableDocument2 document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertNewTableDocument2Operation1015399421
            (
                document, Identity(document),
                session.Versions.ForType<AssociationRegistry.Migrations.Generator.NewTableDocument2, string>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(AssociationRegistry.Migrations.Generator.NewTableDocument2 document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpsertNewTableDocument2Operation1015399421
            (
                document, Identity(document),
                session.Versions.ForType<AssociationRegistry.Migrations.Generator.NewTableDocument2, string>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(AssociationRegistry.Migrations.Generator.NewTableDocument2 document, Marten.Internal.IMartenSession session, string tenant)
        {
            throw new System.NotSupportedException();
        }


        public override string Identity(AssociationRegistry.Migrations.Generator.NewTableDocument2 document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.DirtyTrackingNewTableDocument2Selector1015399421(session, _document);
        }


        public override object RawIdentityValue(string id)
        {
            return id;
        }


        public override Npgsql.NpgsqlParameter BuildManyIdParameter(System.String[] ids)
        {
            return base.BuildManyIdParameter(ids);
        }

    }

    // END: DirtyTrackingNewTableDocument2DocumentStorage1015399421
    
    
    // START: NewTableDocument2BulkLoader1015399421
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class NewTableDocument2BulkLoader1015399421 : Marten.Internal.CodeGeneration.BulkLoader<AssociationRegistry.Migrations.Generator.NewTableDocument2, string>
    {
        private readonly Marten.Internal.Storage.IDocumentStorage<AssociationRegistry.Migrations.Generator.NewTableDocument2, string> _storage;

        public NewTableDocument2BulkLoader1015399421(Marten.Internal.Storage.IDocumentStorage<AssociationRegistry.Migrations.Generator.NewTableDocument2, string> storage) : base(storage)
        {
            _storage = storage;
        }


        public const string MAIN_LOADER_SQL = "COPY public.mt_doc_newtabledocument2(\"mt_dotnet_type\", \"id\", \"mt_version\", \"data\") FROM STDIN BINARY";

        public const string TEMP_LOADER_SQL = "COPY mt_doc_newtabledocument2_temp(\"mt_dotnet_type\", \"id\", \"mt_version\", \"data\") FROM STDIN BINARY";

        public const string COPY_NEW_DOCUMENTS_SQL = "insert into public.mt_doc_newtabledocument2 (\"id\", \"data\", \"mt_version\", \"mt_dotnet_type\", mt_last_modified) (select mt_doc_newtabledocument2_temp.\"id\", mt_doc_newtabledocument2_temp.\"data\", mt_doc_newtabledocument2_temp.\"mt_version\", mt_doc_newtabledocument2_temp.\"mt_dotnet_type\", transaction_timestamp() from mt_doc_newtabledocument2_temp left join public.mt_doc_newtabledocument2 on mt_doc_newtabledocument2_temp.id = public.mt_doc_newtabledocument2.id where public.mt_doc_newtabledocument2.id is null)";

        public const string OVERWRITE_SQL = "update public.mt_doc_newtabledocument2 target SET data = source.data, mt_version = source.mt_version, mt_dotnet_type = source.mt_dotnet_type, mt_last_modified = transaction_timestamp() FROM mt_doc_newtabledocument2_temp source WHERE source.id = target.id";

        public const string CREATE_TEMP_TABLE_FOR_COPYING_SQL = "create temporary table mt_doc_newtabledocument2_temp (like public.mt_doc_newtabledocument2 including defaults)";


        public override string CreateTempTableForCopying()
        {
            return CREATE_TEMP_TABLE_FOR_COPYING_SQL;
        }


        public override string CopyNewDocumentsFromTempTable()
        {
            return COPY_NEW_DOCUMENTS_SQL;
        }


        public override string OverwriteDuplicatesFromTempTable()
        {
            return OVERWRITE_SQL;
        }


        public override async System.Threading.Tasks.Task LoadRowAsync(Npgsql.NpgsqlBinaryImporter writer, AssociationRegistry.Migrations.Generator.NewTableDocument2 document, Marten.Storage.Tenant tenant, Marten.ISerializer serializer, System.Threading.CancellationToken cancellation)
        {
            await writer.WriteAsync(document.GetType().FullName, NpgsqlTypes.NpgsqlDbType.Varchar, cancellation);
            await writer.WriteAsync(((AssociationRegistry.Migrations.Generator.NewTableDocument2)document).Id, NpgsqlTypes.NpgsqlDbType.Text, cancellation);
            await writer.WriteAsync(JasperFx.Core.CombGuidIdGeneration.NewGuid(), NpgsqlTypes.NpgsqlDbType.Uuid, cancellation);
            await writer.WriteAsync(serializer.ToJson(document), NpgsqlTypes.NpgsqlDbType.Jsonb, cancellation);
        }


        public override string MainLoaderSql()
        {
            return MAIN_LOADER_SQL;
        }


        public override string TempLoaderSql()
        {
            return TEMP_LOADER_SQL;
        }

    }

    // END: NewTableDocument2BulkLoader1015399421
    
    
    // START: NewTableDocument2Provider1015399421
    [global::System.CodeDom.Compiler.GeneratedCode("JasperFx", "1.0.0")]
    public sealed class NewTableDocument2Provider1015399421 : Marten.Internal.Storage.DocumentProvider<AssociationRegistry.Migrations.Generator.NewTableDocument2>
    {
        private readonly Marten.Schema.DocumentMapping _mapping;

        public NewTableDocument2Provider1015399421(Marten.Schema.DocumentMapping mapping) : base(new NewTableDocument2BulkLoader1015399421(new QueryOnlyNewTableDocument2DocumentStorage1015399421(mapping)), new QueryOnlyNewTableDocument2DocumentStorage1015399421(mapping), new LightweightNewTableDocument2DocumentStorage1015399421(mapping), new IdentityMapNewTableDocument2DocumentStorage1015399421(mapping), new DirtyTrackingNewTableDocument2DocumentStorage1015399421(mapping))
        {
            _mapping = mapping;
        }


    }

    // END: NewTableDocument2Provider1015399421
    
    
}

