namespace AssociationRegistry.Test.Acm.Api;

<#@ template debug="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Xml.Linq, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
public static class EmbeddedResources {
<#
  string GetRelativePath(string fromPath, string toPath)
  {
    var fromUri = new Uri(fromPath);
    var toUri = new Uri(toPath);
    var relativeUri = fromUri.MakeRelativeUri(toUri);
    var relativePath = Uri.UnescapeDataString(relativeUri.ToString());
    return relativePath.Replace(oldChar: '/', Path.DirectorySeparatorChar);
  }

  void WriteStaticResourceName(string resourceName)
  {
    // Convert the resource name to a valid C# identifier (if needed)
    var validResourceName = new string(resourceName
                                         .Select(ch => char.IsLetterOrDigit(ch) ? ch : '_')
                                         .ToArray());

    WriteLine($"    public const string {validResourceName} = \"{resourceName.Replace(oldChar: '\\', newChar: '.').Replace(oldChar: '/', newChar: '.')}\";");
  }

  var currentDir = Directory.GetCurrentDirectory();
  var csprojPath = Path.Combine(currentDir, "AssociationRegistry.Test.Acm.Api.csproj");
  var xDocument = XDocument.Load(csprojPath);
  var embeddedResourceElements = xDocument.Descendants("EmbeddedResource");

  foreach (var embeddedResourceElement in embeddedResourceElements)
  {
    var includePath = embeddedResourceElement.Attribute("Include").Value;
    if (includePath.Contains("*")) // Wildcard pattern
    {
      var wildcardIndex = includePath.IndexOf('*');
      var lastDirectorySeparator = includePath.LastIndexOf('\\', wildcardIndex);
      var directoryPath = includePath.Substring(0, lastDirectorySeparator);
      var extension = Path.GetExtension(includePath);

      var files = Directory.GetFiles(directoryPath, "*" + extension);
      foreach (var file in files)
      {
        WriteStaticResourceName(file);
      }
    }
    else // Direct path
    {
      WriteStaticResourceName(Path.GetFileName(includePath));
    }
  }
#>
}
