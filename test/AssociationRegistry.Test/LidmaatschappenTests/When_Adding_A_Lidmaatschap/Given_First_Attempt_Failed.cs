namespace AssociationRegistry.Test.LidmaatschappenTests.When_Adding_A_Lidmaatschap;

using Acties.VoegLidmaatschapToe;
using AutoFixture;
using Common.AutoFixture;
using FluentAssertions;
using Resources;
using Vereniging;
using Vereniging.Exceptions;
using Xunit;

public class Given_First_Attempt_Failed
{
    [Fact]
    public void Then_It_Maintains_Correct_Next_LidmaatschapId()
    {
        var fixture = new Fixture().CustomizeDomain();

        var andereVereniging = fixture.Create<VCode>();
        var bestaandLidmaatschap = fixture.Create<Lidmaatschap>() with
        {
            LidmaatschapId = new LidmaatschapId(1),
            AndereVereniging = andereVereniging,
            Geldigheidsperiode = Geldigheidsperiode.Infinity,
        };
        var toeTeVoegenLidmaatschap = fixture.Create<VoegLidmaatschapToeCommand.ToeTeVoegenLidmaatschap>() with
        {
            AndereVereniging = andereVereniging,
            Geldigheidsperiode = Geldigheidsperiode.Infinity,
        };

        var sut = Lidmaatschappen.Empty.Hydrate([
            bestaandLidmaatschap,
        ]);

        var exception = Assert.Throws<LidmaatschapIsOverlappend>(() => sut.VoegToe(toeTeVoegenLidmaatschap));
        exception.Message.Should().Be(ExceptionMessages.LidmaatschapIsOverlappend);

        toeTeVoegenLidmaatschap = toeTeVoegenLidmaatschap with
        {
            AndereVereniging = fixture.Create<VCode>(),
        };

        var lidmaatschap = sut.VoegToe(toeTeVoegenLidmaatschap);
        lidmaatschap.LidmaatschapId.Should().Be(new LidmaatschapId(2));
    }
}
